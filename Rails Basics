
INSTALL RAILS
gem install rails
rails new to_do -d postgresql -T    - tells Rails to use Postgres for the database, and -T tells it not to install its testing tools - by default, it uses a library called test-unit, whereas we use RSpec
.railsrc in your home directory     -   -d postgresql -T   - makes not installing testing tools default

DATABASE BASIC OVERVIEW
  psql to start psql server - auto at home - postgres
  CREATE DATABASE: to_do;
  DROP DATABASE to_do; - first \c to default database
  \l to list 
  \c to_do;   connect
  \d to
  \q to quit
 
  REMINDER DATABASE
      CREATE TABLE contacts (name varchar, age int, birthday timestamp);
      ALTER TABLE contacts ADD family boolean;
      ALTER TABLE contacts DROP family;
      ALTER TABLE contacts ADD id serial PRIMARY KEY;
      INSERT INTO contacts (name, age, birthday) VALUES ('Wes', 43, '1969-05-01');
      INSERT INTO contacts (name, age, birthday) VALUES ('Wes', 43, '1969-05-01') RETURNING id;
      SELECT name FROM contacts;
      SELECT name, birthday FROM contacts;
      SELECT * FROM contacts;
      SELECT * FROM contacts WHERE age >= 18;
      SELECT * FROM contacts WHERE age BETWEEN 13 AND 17;
      SELECT * FROM contacts WHERE name LIKE 'We%';
      SELECT * FROM contacts WHERE NOT age >= 18;
      UPDATE contacts SET name = 'Wes Anderson' WHERE id = 1;
      DELETE FROM contacts WHERE id = 1;
      
      Grab by Id and update created_at then save
      a = Picture.find_by_id(1)
      a.created_at = '2017-01-11 01:36:41'
      a.save
      
      Address.where(:cid => 15).update_all(user_name : 'Samuel')

      RAILS CONSOLE
     rails console or rails c
      exit - exit console
______________________________________________________


START FROM CLONE
postgres (at school)
bundle install
rails s

START NEW PROJECT
postgres (at school)
rails new your_app_name    or     rails new to_do -d postgresql -T
gems + gemfile - gem 'capybara'
bundle  - bundle install
rails g rspec:install
spec/rails_helper.rb - code block - Shoulda::Matchers.configure do |config|
                     - require 'capybara/rails'   - after require 'rspec/rails'

DATABASE
postgres running
rake db:create
rails g migration create_lists
db/migrate/202124124 - add table details to migration file
rake db:migrate
rake db:test:prepare   - create migrations to modify it. or db:rollback
                       
STARTING SERVER
rails server
                       
MODELS
create models/list.rb - add class List < ActiveRecord::Base etc
create spec/models/list_spec.rb - add require 'rails_helper' etc
More Models

------- EXAMPLE CRUD IN RAILS CONSOLE
        NEW and SAVE
          example - list=List.new
                  - list.name="Homework"
                 - list.save
        CREATE - new and save at the same time
                 - List.create(name: "Halloween Party")
        VIEW ALL - List.all     - extra commands find, where, first, last

        UPDATE and DESTROY
           list=List.first - assigns the first item in the list to var list
           list.update(name: "NEW-NAME")
           list.destroy
-----------
   
ROUTES
config/routes.rb - add resources :lists -  rake routes to see

LISTS CONTROLLER
rails g controller lists index show edit new
controllers/lists_controller.rb -  defs
views/lists/index.html.erb  - Loop <% @lists.each do |list| %>

SPECIFIC LIST
controllers/lists_controller.rb - def show
views/lists/show.html.erb - <%= @list.name

CREATE LIST
controllers/lists_controller.rb - def new + def create + private def list_params
views/lists/new.html.erb -  <%= render "form" %>
views/lists/_form.html.erb - form
views/lists/index.html.erb - <%= link_to "New List", new_list_path %>

UPDATE
controllers/lists_controller.rb - def edit + def update
views/lists/edit.html.erb -  <%= render "form" %>
view/lists/show.html.erb -  <%= link_to "Edit", edit_list_path(@list) %>

PARTIALS FOR ERRORS AND FORM
views/layouts/_errors.html.erb - <% if object.errors etc
views/lists/_forms.html.erb - <%= render "layouts/errors etc - notice its in lists folder

DELETE
contr/lists_controller.rb - def destroy
views/lists/show.html.erb - <%= link_to "Delete"

MULTIPLE TASKS PER LIST - TASK MODEL - ONE TO MANY
rails g migration create_tasks - db/migrate/124214_create_tasks.rb - create_table :tasks 
rake db:migrate db:test:prepare
models/task.rb - belongs_to :list
spec/models/task_spec.rb - describe Task do
models/list.rb - has_many:tasks
spec/models/list_spec.rb - it { should have_many :tasks }

TASKS  
config/routes.rb - do resources : tasks  - (Nested inside list and dependent on list existing) rake routes to see routes
controllers/tasks_controller.rb - def new
views/lists/show.html.erb - <% @lists.task.any? loop.  links to create, edit and delete new task

PARTIALS + CREATE, EDIT, DELETE
views/tasks/_form.html.erb
views/tasks/new.html.erb - <%= render 'form' %>
controllers/tasks_controller.rb - def create + private def task_params
controllers/tasks_controller.rb - def new, def create, def edit, def update, def destroy, private  - @task - Task.find(params[:id])
app/views/lists/show.html.erb - link_to new task
views/tasks/edit.html.erb - edit task + partial link to _form + Delete

INTEGRATION TESTING
gemfile - gem 'capybara'
require 'capybara/rails'   - after require 'rspec/rails'
spec/features/add_list_pages_spec.rb

Dynamic Title
views/lists/show.html.erb - <% content_for(:title, "List | To Do") %>
views/layouts/application.html.erb - <title><%= yield(:title) %></title>

FLASH MESSAGES
views/layouts/application.html.erb - <%= flash[:alert] %> + <%= flash[:notice] %>
controllers/lists_controller.rb -  flash[:notice] = "List successfully added!"

IMAGES
<%= image_tag "rails.png" %>

BOOTSTRAP SETUP
gemfile gem 'bootstrap-sass', '~> 3.3.6'    (Make sure the regular bootstrap is not there)
rename application.css to .scss
             @import "bootstrap-sprockets";
             @import "bootstrap"; 
application.js -     
              //= require bootstrap-sprockets



ROUTE TO INDEX
root :to => '/'

           
